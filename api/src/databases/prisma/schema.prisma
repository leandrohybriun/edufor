generator client {
  provider = "prisma-client-js"
  output   = "../../../generated"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  pv       Int     @db.TinyInt
  status   Int     @db.TinyInt
  name     String  @db.VarChar(75)
  email    String  @unique @db.VarChar(100)
  phone    String  @unique @db.VarChar(15)
  password String  @db.VarChar(60)
  avatar   String? @db.VarChar(255)
  bio      String? @db.Text

  institution_id Int?
  team_id        Int?

  team                 Team?                 @relation(fields: [team_id], references: [id], onDelete: Cascade)
  institution          Institution?          @relation(fields: [institution_id], references: [id], onDelete: Cascade)
  teamRequests         TeamRequest[]
  subjects             Subject[]
  battles              Battle[]
  communities          Community[]
  communityPosts       CommunityPost[]
  communityPostLikes   CommunityPostLike[]
  questions            Question[]
  questionAnswers      QuestionAnswer[]
  challenges           Challenge[]
  challengeSubmissions ChallengeSubmission[]
  notifications        Notification[]

  @@map("user")
}

model Institution {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  situation Int     @db.TinyInt
  stripe_id String? @db.VarChar(64)
  name      String  @db.VarChar(75)
  slug      String  @unique @db.VarChar(100)
  bio       String? @db.Text
  logo      String? @db.VarChar(255)
  address   String  @db.VarChar(255)
  phone     String  @db.VarChar(15)
  email     String  @db.VarChar(100)
  document  String  @db.VarChar(14)

  subjects    Subject[]
  battles     Battle[]
  users       User[]
  communities Community[]
  teams       Team[]
  challenges  Challenge[]

  @@index([slug])
  @@map("institution")
}

model Subject {
  id             Int @id @default(autoincrement())
  institution_id Int

  name String @db.VarChar(75)
  slug String @unique @db.VarChar(100)

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  institution Institution @relation(fields: [institution_id], references: [id], onDelete: Cascade)
  battles     Battle[]
  users       User[]
  questions   Question[]

  @@index([slug])
  @@map("subject")
}

model Battle {
  id             Int @id @default(autoincrement())
  subject_id     Int
  institution_id Int

  duration    Int
  status      Int    @db.TinyInt
  battle_type Int    @db.TinyInt
  slug        String @unique @db.VarChar(100)
  name        String @db.VarChar(75)

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  subject      Subject       @relation(fields: [subject_id], references: [id], onDelete: Cascade)
  institution  Institution   @relation(fields: [institution_id], references: [id], onDelete: Cascade)
  users        User[]
  battleRounds BattleRound[]
  questions    Question[]

  @@index([slug])
  @@map("battle")
}

model BattleRound {
  id        Int @id @default(autoincrement())
  battle_id Int

  round     Int    @db.TinyInt
  max_score Int
  name      String @db.VarChar(75)

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  battle    Battle     @relation(fields: [battle_id], references: [id], onDelete: Cascade)
  questions Question[]

  @@map("battle_round")
}

model Question {
  id              Int  @id @default(autoincrement())
  user_id         Int
  subject_id      Int
  battle_id       Int?
  battle_round_id Int?

  status     Int    @db.TinyInt
  difficulty Int    @db.TinyInt
  content    String @db.Text

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  battle          Battle?          @relation(fields: [battle_id], references: [id], onDelete: Cascade)
  battleRound     BattleRound?     @relation(fields: [battle_round_id], references: [id], onDelete: Cascade)
  user            User             @relation(fields: [user_id], references: [id], onDelete: Cascade)
  subject         Subject          @relation(fields: [subject_id], references: [id])
  questionOptions QuestionOption[]
  questionAnswers QuestionAnswer[]

  @@index([battle_id, battle_round_id])
  @@map("question")
}

model QuestionOption {
  id          Int @id @default(autoincrement())
  question_id Int

  content    String  @db.Text
  is_correct Boolean

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  question        Question         @relation(fields: [question_id], references: [id], onDelete: Cascade)
  questionAnswers QuestionAnswer[]

  @@map("question_option")
}

model QuestionAnswer {
  id                 Int @id @default(autoincrement())
  user_id            Int
  question_option_id Int
  question_id        Int

  score Int?

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  user           User           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  questionOption QuestionOption @relation(fields: [question_option_id], references: [id], onDelete: Cascade)
  question       Question       @relation(fields: [question_id], references: [id], onDelete: Cascade)

  @@unique([user_id, question_id])
  @@map("question_answer")
}

model Challenge {
  id             Int  @id @default(autoincrement())
  user_id        Int
  institution_id Int?
  team_id        Int?

  name        String @db.VarChar(75)
  description String @db.Text

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  institution          Institution?          @relation(fields: [institution_id], references: [id], onDelete: Cascade)
  team                 Team?                 @relation(fields: [team_id], references: [id], onDelete: Cascade)
  user                 User                  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  files                File[]
  challengeSubmissions ChallengeSubmission[]

  @@map("challenge")
}

model ChallengeSubmission {
  id           Int @id @default(autoincrement())
  user_id      Int
  challenge_id Int

  status   Int     @db.TinyInt
  score    Int?
  feedback String? @db.Text
  links    String? @db.Text

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  user      User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  challenge Challenge @relation(fields: [challenge_id], references: [id], onDelete: Cascade)
  files     File[]

  @@map("challenge_submission")
}

model Community {
  id             Int @id @default(autoincrement())
  institution_id Int

  name String @db.VarChar(75)
  slug String @unique @db.VarChar(100)

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  institution    Institution     @relation(fields: [institution_id], references: [id], onDelete: Cascade)
  users          User[]
  communityPosts CommunityPost[]

  @@index([slug])
  @@map("community")
}

model Team {
  id             Int @id @default(autoincrement())
  institution_id Int

  name String @db.VarChar(75)
  slug String @unique @db.VarChar(100)

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  institution   Institution    @relation(fields: [institution_id], references: [id], onDelete: Cascade)
  users         User[]
  teamRequests  TeamRequest[]
  challenges    Challenge[]
  notifications Notification[]

  @@index([slug])
  @@map("team")
}

model TeamRequest {
  id      Int @id @default(autoincrement())
  team_id Int
  user_id Int

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  team Team @relation(fields: [team_id], references: [id], onDelete: Cascade)
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([team_id, user_id])
  @@map("team_request")
}

model CommunityPost {
  id           Int @id @default(autoincrement())
  community_id Int
  user_id      Int

  situation Int    @db.TinyInt
  title     String @db.VarChar(75)
  content   String @db.Text

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  community          Community           @relation(fields: [community_id], references: [id], onDelete: Cascade)
  user               User                @relation(fields: [user_id], references: [id], onDelete: Cascade)
  communityPostLikes CommunityPostLike[]
  files              File[]

  @@map("community_post")
}

model File {
  id                      Int  @id @default(autoincrement())
  community_post_id       Int?
  challenge_id            Int?
  challenge_submission_id Int?

  name String @db.VarChar(75)
  url  String @db.VarChar(255)
  type String @db.VarChar(16)

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  communityPost        CommunityPost?       @relation(fields: [community_post_id], references: [id], onDelete: Cascade)
  challenge            Challenge?           @relation(fields: [challenge_id], references: [id], onDelete: Cascade)
  challenge_submission ChallengeSubmission? @relation(fields: [challenge_submission_id], references: [id])

  @@map("file")
}

model CommunityPostLike {
  id                Int @id @default(autoincrement())
  community_post_id Int
  user_id           Int

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  communityPost CommunityPost @relation(fields: [community_post_id], references: [id], onDelete: Cascade)
  user          User          @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([community_post_id, user_id])
  @@map("community_post_like")
}

model Notification {
  id      Int  @id @default(autoincrement())
  user_id Int?
  team_id Int?

  type    Int     @db.TinyInt
  title   String  @db.VarChar(75)
  content String  @db.Text
  link    String? @db.VarChar(255)
  read    Boolean @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  user User? @relation(fields: [user_id], references: [id], onDelete: Cascade)
  team Team? @relation(fields: [team_id], references: [id], onDelete: Cascade)

  @@map("notification")
}
